#!/usr/bin/ruby

def generate_ip (name, network_type)

  #Creating the 2 arrays
  ip_in_use=[]
  vm_ip_range=[]

  #IP range
  if network_type == "nat"
    start_ip = IPAddr.new(NAT_START_IP)
    end_ip   = IPAddr.new(NAT_END_IP)
  elsif network_type == "floating"
    start_ip = IPAddr.new(START_IP)
    end_ip   = IPAddr.new(END_IP)
  else
    puts "Non supported network_type: #{network_type}... Stopping!".red.bold
    exit 1
  end

  <% if backend == "mysql" %>
  require_relative "#{LIB}/mysql_backend.rb"
  ip_in_use = get_ips_list<% elsif backend == "postgres" %>
  require_relative "#{LIB}/postgres_backend.rb"
  ip_in_use = get_ips_list<% end %>

  #list of IPs in use
  ip_in_use=ip_in_use.sort!

  #Generating the range of IPs in an Array
  vm_ip_range=(start_ip..end_ip).map(&:to_s)

  #Difference between rango of IPs and the IPs in use
  available= vm_ip_range - ip_in_use

  if available[0].nil?
    puts "\nno more IPs available! Stopping...\n".red.bold
    exit 1
  end

  puts "That new guest will have the IP: " + "#{available[0]}\n".bold
  ip = available[0]

  #Generate template for the new guest
  if network_type == "nat"
    template = ERB.new(File.read("#{TEMPLATES}/TEMPLATE-user-data-nat.erb"))
  else
    template = ERB.new(File.read("#{TEMPLATES}/TEMPLATE-user-data.erb"))
  end
  interfaces = template.result(binding)
  File.open("#{USER_DATA}/#{name}-user-data.erb", "w") do |file|
    file.puts interfaces
  end
  <% if backend == "mysql" || backend == "postgres" %>return ip<% end %>
end
