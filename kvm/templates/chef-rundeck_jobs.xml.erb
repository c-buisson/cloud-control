<joblist>
  <job>
    <context>
      <options preserveOrder='true'>
        <option name='name' required='true' valuesUrl='file:<%= kvm_folder %>/lists/vm_list.json'>
          <description>Guest's name</description>
        </option>
      </options>
    </context>
    <description>Bootstrap a guest to the Docker Chef server.</description>
    <executionEnabled>true</executionEnabled>
    <id>cac7cc96-2721-4d2e-bd1c-7f5655a0dd11</id>
    <loglevel>INFO</loglevel>
    <name>4.Bootstrap guest</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

guest=ENV['RD_OPTION_NAME']
eval File.read("<%= kvm_folder %>/ENV")
<% if backend == "mysql" %>
require_relative "#{LIB}/mysql_backend.rb"<% elsif backend == "postgres" %>
require_relative "#{LIB}/postgres_backend.rb"<% end %>
ip = guest_ip ENV['RD_OPTION_NAME']

puts "Sleeping 10 seconds for the guest to fully start."
sleep 10
system("knife bootstrap -c /var/lib/rundeck/.chef/config.rb #{ip} --ssh-user ubuntu -i /var/lib/rundeck/.ssh/id_rsa --no-host-key-verify --node-name #{ENV['RD_OPTION_NAME']} --sudo") or raise "Couldn't bootstrap #{ENV['RD_OPTION_NAME']}...".red

puts "\n#{ENV['RD_OPTION_NAME']} is now bootstrapped to the Chef server!".cyan]]></script>
        <scriptargs />
      </command>
      <command>
        <jobref name='Docker: Restart chef-rundeck' />
      </command>
    </sequence>
    <uuid>cac7cc96-2721-4d2e-bd1c-7f5655a0dd11</uuid>
  </job>
  <job>
    <description>Delete both Chef containers.</description>
    <executionEnabled>true</executionEnabled>
    <id>a3a622f8-2e00-4942-bc6d-ce0f8f0b6088</id>
    <loglevel>INFO</loglevel>
    <name>Docker: Delete chef-server and chef-rundeck containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

require 'colorize'

system("docker rm -f chef-server")
puts "\nchef-server has been deleted!"

system("docker rm -f chef-rundeck")
puts "\nchef-rundeck has been deleted!"

puts "Done!".bold]]></script>
        <scriptargs />
      </command>
      <pluginConfig>
        <WorkflowStrategy>
          <node-first />
        </WorkflowStrategy>
      </pluginConfig>
    </sequence>
    <uuid>a3a622f8-2e00-4942-bc6d-ce0f8f0b6088</uuid>
  </job>
  <job>
    <description>Restart chef-rundeck container to have the lastest node list.</description>
    <executionEnabled>true</executionEnabled>
    <id>aafaf955-50c1-4db0-a1f0-06126fceb450</id>
    <loglevel>INFO</loglevel>
    <name>Docker: Restart chef-rundeck</name>
    <nodeFilterEditable>false</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <exec>docker restart chef-rundeck</exec>
      </command>
      <pluginConfig>
        <WorkflowStrategy>
          <node-first></node-first>
        </WorkflowStrategy>
      </pluginConfig>
    </sequence>
    <uuid>aafaf955-50c1-4db0-a1f0-06126fceb450</uuid>
  </job>
  <job>
    <description>Start both Chef containers.</description>
    <executionEnabled>true</executionEnabled>
    <id>1732d47e-23bf-495b-969c-cb8d45b49c10</id>
    <loglevel>INFO</loglevel>
    <name>Docker: Start chef-server and chef-rundeck containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

require 'colorize'

system("docker start chef-server")
puts "\nchef-server has been started!"

system("docker start chef-rundeck")
puts "\nchef-rundeck has been started!"

puts "Done!".bold]]></script>
        <scriptargs />
      </command>
      <pluginConfig>
        <WorkflowStrategy>
          <node-first />
        </WorkflowStrategy>
      </pluginConfig>
    </sequence>
    <uuid>1732d47e-23bf-495b-969c-cb8d45b49c10</uuid>
  </job>
  <job>
    <description>Stop both Chef containers.</description>
    <executionEnabled>true</executionEnabled>
    <id>8a7a644c-3415-4db0-96b7-d7f30a395598</id>
    <loglevel>INFO</loglevel>
    <name>Docker: Stop chef-server and chef-rundeck containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

require 'colorize'

system("docker stop chef-server")
puts "\nchef-server has been stopped!"

system("docker stop chef-rundeck")
puts "\nchef-rundeck has been stopped!"

puts "Done!".bold]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>8a7a644c-3415-4db0-96b7-d7f30a395598</uuid>
  </job>
  <job>
    <context>
      <options preserveOrder='true'>
        <option name='name' required='true' valuesUrl='file:<%= kvm_folder %>/lists/vm_list.json'>
          <description>Guest's name</description>
        </option>
      </options>
    </context>
    <description>Destroy a vm and remove all its files.</description>
    <executionEnabled>true</executionEnabled>
    <id>d19116c4-98a7-4153-8139-52c88a435953</id>
    <loglevel>INFO</loglevel>
    <name>KVM: Delete guest</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

guest=ENV['RD_OPTION_NAME']
eval File.read("<%= kvm_folder %>/ENV")
require 'libvirt'
require_relative "#{LIB}/lists.rb"<% if backend == "mysql" %>
require_relative "#{LIB}/mysql_backend.rb"<% elsif backend == "postgres" %>
require_relative "#{LIB}/postgres_backend.rb"<% end %>

conn = Libvirt::open('qemu:///system')
conn.list_domains.each do |domid|
  dom = conn.lookup_domain_by_id(domid)
  if dom.name == guest
    puts "Deleting running guest: #{dom.name}".red.bold
    dom.destroy
    dom.undefine
  end
end
conn.list_defined_domains.each do |domname|
  if domname == guest
    puts "Deleting stopped guest: #{domname}".red.bold
    system("virsh -q undefine #{domname}")
  end
end
conn.close

chef_client=`knife node list |grep #{guest}`
if chef_client.empty?
  puts "#{guest} isn't bootstrap to Chef-Server, moving on...".bold
else
  puts "\nClean up Chef server"
  system("knife client -c /var/lib/rundeck/.chef/config.rb delete -y #{guest}")
  system("knife node -c /var/lib/rundeck/.chef/config.rb delete -y #{guest}")
  system("rd run -p kvm-control -j \"Docker: Restart chef-rundeck\"")
end

if File.exist?("#{USER_DATA}/#{guest}-user-data.erb")<% if backend == "mysql" %>
  require_relative "#{LIB}/mysql_backend.rb"<% elsif backend == "postgres" %>
  require_relative "#{LIB}/postgres_backend.rb"<% end %>
  ip = guest_ip guest
  remove_guest guest
  require_relative "#{LIB}/lists.rb"
  delete_from_list "vm", guest, ip
  puts "#{guest}'s IP address (" + ip.chomp.bold + ") was released"
else
  puts "No user-data for that guest, no static IP to release\n"<% if backend == "mysql" %>
  require_relative "#{LIB}/mysql_backend.rb"<% elsif backend == "postgres" %>
  require_relative "#{LIB}/postgres_backend.rb"<% end %>
  ip = "DHCP"
  remove_guest guest
  require_relative "#{LIB}/lists.rb"
  delete_from_list "vm", guest, ip
end

puts "removing folder: " + "#{GUEST}/\n".red
FileUtils.rm_rf(GUEST)

#Update Bind
list=list_all_guests
serial=Time.now.to_i
require 'erb'
template = ERB.new(File.read("<%= kvm_folder %>/templates/db.local.erb"))
xml_content = template.result(binding)
File.open("/etc/bind/db.local", "w") do |file|
 file.puts xml_content
end
template = ERB.new(File.read("<%= kvm_folder %>/templates/db.1XX.erb"))
xml_content = template.result(binding)
File.open("/etc/bind/db.1XX", "w") do |file|
  file.puts xml_content
end
puts "Reloading Bind9..."
system("sudo systemctl reload bind9")

puts "\nInstance destroyed and files removed"
puts "Carry on..."]]></script>
        <scriptargs />
      </command>
      <command>
        <jobref name='Docker: Restart chef-rundeck' />
      </command>
    </sequence>
    <uuid>d19116c4-98a7-4153-8139-52c88a435953</uuid>
  </job>
  <job>
    <context>
      <options preserveOrder='true'>
        <option name='cores' value='1' values='1,2'>
          <description>Number of cores</description>
        </option>
        <option name='name' required='true'>
          <description>Guest's name</description>
        </option><% if floating == "yes" %>
        <option name='network_type' value='nat' values='floating,nat'>
          <description>NAT or Floating IP?</description>
        </option><% elsif floating == "no" %><option name='network_type' value='nat' values='nat'>
          <description>NAT IP</description>
        </option><% end %>
        <option name='ram' value='256' values='1024,128,2048,256,512'>
          <description>in Mb</description>
        </option>
        <option name='size' required='true'>
          <description>Disk space in Gb</description>
        </option>
        <option name='source' required='true' valuesUrl='file:<%= kvm_folder %>/lists/source_list.json'>
          <description>Cloud image or ISO</description>
        </option>
        <option name='with_chef' value='no' values='no,yes'>
          <description>Boostrap this guest with 'chef-server'?</description>
        </option>
      </options>
    </context>
    <description>Launch a new instance!</description>
    <executionEnabled>true</executionEnabled>
    <id>42d8f84b-ee23-4fac-bab9-2c07b6b422bd</id>
    <loglevel>INFO</loglevel>
    <name>.Launch KVM guest</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <jobref name='1.Create image disk'>
          <arg line='-name ${option.name} -size ${option.size} -source ${option.source}' />
        </jobref>
      </command>
      <command>
        <jobref name='2.Create guest XML'>
          <arg line='-name ${option.name} -ram ${option.ram} -cores ${option.cores} -source ${option.source} -network_type ${option.network_type} -with_chef ${option.with_chef}' />
        </jobref>
      </command>
      <command>
        <jobref name='3.Create VIRSH guest'>
          <arg line='-name ${option.name} -with_chef ${option.with_chef}' />
        </jobref>
      </command>
    </sequence>
    <uuid>42d8f84b-ee23-4fac-bab9-2c07b6b422bd</uuid>
  </job>
  <job>
    <description>Destroy all vms and remove all their files.</description>
    <executionEnabled>true</executionEnabled>
    <id>eaa03caf-e741-4233-ab81-59425cb478df</id>
    <loglevel>INFO</loglevel>
    <name>KVM: Delete all guests</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby

guest=""
eval File.read("<%= kvm_folder %>/ENV")
require 'libvirt'
require_relative "#{LIB}/lists.rb"<% if backend == "mysql" %>
require_relative "#{LIB}/mysql_backend.rb"<% elsif backend == "postgres" %>
require_relative "#{LIB}/postgres_backend.rb"<% end %>

# Get list of all KVM guests
all_guests=[]
conn = Libvirt::open('qemu:///system')
conn.list_domains.each do |domid|
  dom = conn.lookup_domain_by_id(domid)
  all_guests << dom.name
  puts "\nDeleting running guest: #{dom.name}".red.bold
  dom.destroy
  dom.undefine
end
conn.list_defined_domains.each do |domname|
  all_guests << domname
  puts "\nDeleting stopped guest: #{domname}".red.bold
  system("virsh -q undefine #{domname}")
end

all_guests.each do |kvm_guest|
  if File.exist?("#{GUESTS_DIR}/#{kvm_guest}/user-data/#{kvm_guest}-user-data.erb")
    ip = guest_ip kvm_guest
    remove_guest kvm_guest
    delete_from_list "vm", kvm_guest, ip
    puts "#{kvm_guest}'s IP address (" + ip.chomp.bold + ") was released"
  else
    puts "No user-data for that guest, no static IP to release\n"
    ip = "DHCP"
    remove_guest kvm_guest
    delete_from_list "vm", kvm_guest, ip
  end
  puts "removing folder: " + "#{GUESTS_DIR}/#{kvm_guest}/\n".red
  FileUtils.rm_rf(GUESTS_DIR+"/"+kvm_guest)
end

conn.close

# Cleanup Chef-Server
chef_clients=`knife node list`.split("\n")
if chef_clients.empty?
  puts "No Chef-client to remove"
else
  puts "Clean up Chef server".bold
  chef_clients.each do |chef_node|
    puts "\nRemoving #{chef_node} from Chef".red.bold
    system("knife client -c /var/lib/rundeck/.chef/config.rb delete -y #{chef_node}")
    system("knife node -c /var/lib/rundeck/.chef/config.rb delete -y #{chef_node}")
  end
end

#Update Bind
list=list_all_guests
serial=Time.now.to_i
require 'erb'
template = ERB.new(File.read("<%= kvm_folder %>/templates/db.local.erb"))
xml_content = template.result(binding)
File.open("/etc/bind/db.local", "w") do |file|
 file.puts xml_content
end
template = ERB.new(File.read("<%= kvm_folder %>/templates/db.1XX.erb"))
xml_content = template.result(binding)
File.open("/etc/bind/db.1XX", "w") do |file|
  file.puts xml_content
end
puts ""
puts "Reloading Bind9...".bold
system("sudo systemctl reload bind9")

puts "\nInstance destroyed and files removed"
puts "Carry on..."
]]></script>
        <scriptargs />
      </command>
      <command>
        <jobref name='Docker: Restart chef-rundeck' nodeStep='true' />
      </command>
    </sequence>
    <uuid>eaa03caf-e741-4233-ab81-59425cb478df</uuid>
  </job>
</joblist>
