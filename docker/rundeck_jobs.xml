<joblist>
  <job>
    <description>Stop and delete all Docker containers!</description>
    <executionEnabled>true</executionEnabled>
    <id>09bfb40a-26b8-4c29-b342-9391bfea40b6</id>
    <loglevel>INFO</loglevel>
    <name>Delete all containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <jobref name='Stop all containers' />
      </command>
      <command>
        <script><![CDATA[#!/usr/bin/ruby
list=`docker ps -a -q`.chomp
if list.empty?
  puts "There are no containers to delete!"
  exit 0
else
  list.split("\n").each do |container|
    system("docker rm -f #{container}")
    sleep 1
  end

  sleep 5
  system("docker ps -a")
 puts "\nAll the Docker containers have been deleted!"
end]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>09bfb40a-26b8-4c29-b342-9391bfea40b6</uuid>
  </job>
  <job>
    <description>Delete all Docker images.</description>
    <executionEnabled>true</executionEnabled>
    <id>e08a615e-9aac-4913-a831-468cd7fc7e0d</id>
    <loglevel>INFO</loglevel>
    <name>Delete all images</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby
images=`docker images -a -q`.chomp
if images.empty?
  puts "No images on that server!"
  exit 0
else
  images.split("\n").each do |image|
    puts "Deleting: #{image}"
    system("docker rmi -f #{image}")
    sleep 1
  end

  sleep 5
  system("docker images -a")
  puts "\nAll the Docker images have been deleted!"
end]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>e08a615e-9aac-4913-a831-468cd7fc7e0d</uuid>
  </job>
  <job>
    <description>List them all!</description>
    <executionEnabled>true</executionEnabled>
    <id>51726770-d6e5-4fbb-9287-b77461badfbc</id>
    <loglevel>INFO</loglevel>
    <name>List all containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/bin/bash

docker ps -a]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>51726770-d6e5-4fbb-9287-b77461badfbc</uuid>
  </job>
  <job>
    <description>List all local images</description>
    <executionEnabled>true</executionEnabled>
    <id>0a718e02-5189-4dbf-8e19-300108561a87</id>
    <loglevel>INFO</loglevel>
    <name>List all images</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/bin/bash

docker images]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>0a718e02-5189-4dbf-8e19-300108561a87</uuid>
  </job>
  <job>
    <description>List only the running containers</description>
    <executionEnabled>true</executionEnabled>
    <id>3d19b229-ebef-4fc7-9904-75efaa14621b</id>
    <loglevel>INFO</loglevel>
    <name>List all running containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/bin/bash

docker ps]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>3d19b229-ebef-4fc7-9904-75efaa14621b</uuid>
  </job>
  <job>
    <description>Stop all Docker containers.</description>
    <executionEnabled>true</executionEnabled>
    <id>86a67182-ffbf-4f17-9654-aa253f0e5355</id>
    <loglevel>INFO</loglevel>
    <name>Stop all containers</name>
    <nodeFilterEditable>true</nodeFilterEditable>
    <scheduleEnabled>true</scheduleEnabled>
    <sequence keepgoing='false' strategy='node-first'>
      <command>
        <script><![CDATA[#!/usr/bin/ruby
list=`docker ps -a -q`.chomp
if list.empty?
  puts "All the containers are already stopped!"
  exit 0
else
  list.split("\n").each do |container|
    system("docker stop #{container}")
    sleep 1
  end

  sleep 5
  system("docker ps -a")
  puts "\nAll the Docker containers have been stopped!"
end]]></script>
        <scriptargs />
      </command>
    </sequence>
    <uuid>86a67182-ffbf-4f17-9654-aa253f0e5355</uuid>
  </job>
</joblist>
